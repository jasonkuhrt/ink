// offset=1 is a good default because it means appear flush, as in, the first item doesn't need to have a gutter
list-gutter(gutter=o,selector="*",box_part="margin",offset=1,list_selector=null,orientation,flush=null)
    if list_selector is null
        list_selector = build-list-selector(selector,offset)

    {list_selector}
        css-shorthand(box_part,gutter)

    list-flush-auto(flush,selector,box_part,orientation,gutter)



// TODO h-gutter and v-gutter seem stupid
h-gutter(h_gutter=1,selector="*",box_part="margin",offset=1)

    l_gutter = h_gutter[0]
    r_gutter = h_gutter[1] is null ? h_gutter[0] : h_gutter[1]
    gutter   = o r_gutter o l_gutter

    list-gutter(gutter,selector,box_part,offset,null,"horizontal")

v-gutter(v_gutter=1,selector="*",box_part="margin",offset=1)

    t_gutter = v_gutter[0]
    b_gutter = v_gutter[1] is null ? v_gutter[0] : v_gutter[1]
    gutter   = t_gutter o b_gutter o
    
    list-gutter(gutter,selector,box_part,offset,null,"vertical")

stack(gutter=o, selector="*", box_part="margin", flush=null, offset=1)
    list_selector = build-list-selector(selector,offset)
    {list_selector}
        display block
    list-gutter(gutter,selector,box_part,offset,list_selector,"vertical",flush)

build-list-selector(item_selector="*",offset=1)
    if offset is 1
        return "& > "+ item_selector
    else
        return "& > "+item_selector+":nth-child(n+"+offset+")" //"

list-flush-auto(flush,item_seleector,box_part,orientation,gutter)
    // flush can be:
    // null             automatically resolve flush
    // false [bool]     turn flush off
    // true [bool]      force flush on both sides

    if flush isnt false and flush isnt null
        // user explicitly passed in flush
        // must be: true, true false, or false true
        list-flush(flush,selector,box_part,orientation)
    else if flush is null
        // automatically resolve flush
        if gutter isnt ignore_side
            // optimization: stop if gutter is not used

            // get flush for start and end separately, users are not forced to have all or nothing with flushes
            flush = has-clockhand-side(start-side(orientation), gutter)
            push(flush,has-clockhand-side(end-side(orientation), gutter))

            list-flush(flush,selector,box_part,orientation)

list-flush(flush,item_selector,box_part,orientation)
    start_flush = flush[0]
    end_flush   = flush[1] isnt null ? flush[1] : flush[0]

    if start_flush
        & > {item_selector}:first-child
            {box_part}-{start-side(orientation)} 0
    if end_flush
        & > {item_selector}:last-child
            {box_part}-{end-side(orientation)} 0


/*
show-bug()
    some_prop = "margin-right"
    some_condition = true
    .some-selector
        color red
        if some_condition
            {some_prop} 0
*/


//TODO unquote align within box align assignment
list(orient, gutter=gu, flow_method="inline-block", align=start, offset=0, flush=true,flexes=false,move_method="margin")
    //TODO think this over
    //Instead of using `flushend` function, just start the pushing process one-time later
    //but this requires support for/of nth-child
    flush_number = 1
    flush_number += 1 if flush
    & > *:nth-child(n+{offset+flush_number})
        prop = move_method +"-"+ getPushSide(orient)
        vendorize-unit(prop,gutter)

    if flow_method is "box"
        box(flexes,orient,align)
    else
        //TODO  apply alignment rules to inline-block/block queues and stacks
        & > *:nth-child(n+{offset+1})
            display unquote(flow_method)
            vertical-align unquote(align)
    


box-stack(gutter=gu, align=start, offset=0,flush=true,flexes=false,move_method="margin")
    list("vertical", gutter, "box", align, offset, flush,flexes,move_method)

box-queue(gutter=gd, align=start, offset=0,flush=true,flexes=false,move_method="margin")
    list("horizontal", gutter, "box", align, offset, flush,flexes,move_method)


hbox(flexes=false,align=start)
    box(flexes,"horizontal",align)

vbox(flexes=false,align=start)
    box(flexes,"vertical",align)

cbox()
    hbox(align:center)
    & > .inner
        vbox(center)

cblock(size=false)
    margin-left auto
    margin-right auto

    vendorize-unit("width",size) if size or type(size) is "number"
center-block = cblock


/*
TODO
- vgutter
- hgutter
*/
matrix(length,gutter=gu,align="top",offset=0,move_method="margin",flush=true)
    // +2 because being flush means ignore gutters on the first item
    // and START doing stuff on the second item
    flush_number = 0
    flush_number += 2 if flush


    // gutters
    & > *:nth-child(n+{offset+flush_number})
        prop = move_method +"-"+ getPushSide("horizontal")
        vendorize-unit(prop,gutter)
    // +1 so that we START at the beginning of the second row
    & > *:nth-child(n+{offset+length+1})
        prop = move_method +"-"+ getPushSide("vertical")
        vendorize-unit(prop,gutter)


    // flush-horizontal
    // +1 so that we START at the beginning of the second row
    //TODO
    //- flush number?
    & > *:nth-child({length}n+{offset+length+1})
        prop = move_method +"-"+ getPushSide("horizontal")
        {prop} 0
    

    //TODO  apply alignment rules to inline-block/block queues and stacks
    // use a simpler selector when we want all the children
    // +1 because i.e. offsetting 1 means START at 2
    stricter_selector = offset is 0 ? "" : s(":nth-child(n+%s)",offset+1)
    & > *{stricter_selector}
        display inline-block
        vertical-align unquote(align)



