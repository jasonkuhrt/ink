hide()
    opacity 0

suppress()
    display none


disable(functional=false)
    cursor default
    user-select none
    pointer-events none if !functional

/*
 * Opacity with conditional IE support.
 */

//source: http://css-tricks.com/snippets/css/cross-browser-opacity/
opacity(n)
  opacity: n
  if support_for_ie
    //ie8
    filter 'progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)' % round(n * 100)
    //ie6-7
    //TODO confirm below works
    ie_prop = 'alpha(opacity=50)' % round(n*100)
    filter unquote(ie_prop)





// synopsis
// border ({border}({size} n[ n][ n][ n]), ({style} s[ s][ s][ s]), ({color} c[ c][ c][ c]))[/ {border}][/ {border}]
// border()








optional-side(prop,n)
    if n isnt ignore_side
        vendorize-unit(prop,n)
        
css-shorthand(prop,n)
    if n isnt ignore_side
        format       = length(n)
        order       = 0 0 0 0
        // Very important to keep the '-' here, because
        // it is possible the sides will be iterated upon
        // like for positional sides: `top`, `left` etc.
        // which would break if the dash was present
        // By keeping the dsah here we only use it when needed
        prop_prefix = prop isnt false ? prop+"-" : ""

        if format is 2
            order = 0 1 0 1
        else if format is 3
            order = 0 1 2 1
        else if format is 4
            order = 0 1 2 3
        else if format isnt 1
            warn('your format is wrong')

        if n isnt ignore_side
            // When prop is false, it means we want to iterate
            // over the sides, since unlike prop, there are 
            // always 4 sides. I.e. top/right/bottom/left may all
            // be assigned 'auto', but that still has to be iterated below
            if prop isnt false and format is 1
                vendorize-unit(prop,n)
            else
                for side,i in css_sides
                    optional-side(prop_prefix+side,n[order[i]])





//SIDES


getPushSide(orientation)
    if orientation is "vertical"
        return vertical_push_side
    else if orientation is "horizontal"
        return horizontal_push_side

getStart(orientation)
    if orientation is "vertical"
        "top"
    else if orientation is "horizontal"
        "left"
    else
        throw "#{orientation} is not a valid orientation"

getEnd(orientation)
    if orientation is "vertical"
        "bottom"
    else if orientation is "horizontal"
        "right"

start-side(orientation)
    getStart(orientation)

end-side(orientation)
    getEnd(orientation)

has-clockhand-side(sought_side,clockhand)
    return get-clockhand-side(sought_side, clockhand) isnt ignore_side

has-clockhand-sides(sought_sides,clockhand)
    each sought_side in sought_sides
        if get-clockhand-side(sought_side, clockhand) isnt ignore_side
            return false
    return true

get-clockhand-side(sought_side, clockhand)
    format = length(clockhand)
    if format is 1
        return clockhand 

    else if format is 2
        if sought_side is "top" or sought_side is "bottom"
            sought_side_i = 0
        else
            sought_side_i = 1
        return clockhand[sought_side_i]

    else if format is 3
        // TODO

    else if format is 4
        if sought_side is "top"
           sought_side_i = 0
        else if sought_side is "right"
           sought_side_i = 1
        else if sought_side is "bottom"
           sought_side_i = 2
        else if sought_side is "left"
           sought_side_i = 3
        else
           throw "#{sought_side} is not a valid side to seek. It should be one of: top, right, bottom, left"

        return clockhand[sought_side_i]



//TODO opposite terminus
// a terminus is either start or end
// converting a terminus to a side depends on orient
// i.e. start could be top or left
// i.e. end could be right or bottom
convertTerminusToSide(orient,terminus)
    if orient is 'vertical'
        if terminus is 'start'
            "top"
        else if terminus is 'end'
            "bottom"
    else if orient is 'horizontal'
        if terminus is 'start'
            "left"
        else if terminus is 'end'
            "right"

convertDirectionToSide(direction)
    if direction is "up"
        "top"
    else if direction is "down"
        "bottom"
    else
        direction
//TODO support corners like down right

oppositeSide(side)
    side = convertDirectionToSide(side)
    opposite-position(side)    

// TODO implement a dynamic version of the below functions, it should be able to work like this: sides[sides.indexof(some_side)-1], etc
//TODO implement a `by` feature, so I can `clockwise` up by 3 and get `right`
//TODO support corner turning, like going from "bottom left" to "bottom right" to "top left" etc.
clockwiseSide(side)
    side = convertDirectionToSide(side)
    if side is "top"
        "right"
    else if side is "right"
        "bottom"
    else if side is "bottom"
        "left"
    else if side is "left"
        "top"

counterClockwiseSide(side)
    side = convertDirectionToSide(side)
    if side is "top"
        "left"
    else if side is "left"
        "bottom"
    else if side is "bottom"
        "right"
    else if side is "right"
        "top"







