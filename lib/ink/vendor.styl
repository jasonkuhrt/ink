@import 'config'


user-select()
    vendorize-property('user-select', arguments)

user-modify()
    vendorize-property('user-modify',arguments)

// COLUMN

columns()
  vendorize-property('columns', arguments)

column-count()
  vendorize-property('column-count', arguments)

column-span()
  vendorize-property('column-span', arguments)

column-gap()
  vendorize-property('column-gap', arguments)

column-width()
  vendorize-property('column-width', arguments)

column-rule()
  vendorize-property('column-rule', arguments)

column-rule-width()
  vendorize-property('column-rule-width', arguments)

column-rule-style()
  vendorize-property('column-rule-style', arguments)

column-rule-color()
  vendorize-property('column-rule-color', arguments)




// BACKGROUNDS AND BOARDERS

background-size()
  vendorize-property('background-size', arguments)

background-origin()
  vendorize-property('background-origin', arguments)

background-clip()
  vendorize-property('background-clip', arguments)



border-image()
  vendorize-property('border-image', arguments)

text-overflow()
  vendorize-property('text-overflow', arguments)

font-feature-settings()
  vendorize-property('font-feature-settings', arguments)

hyphens()
  vendorize-property('hyphens',arguments)

object-position()
  vendorize-property('object-position', arguments)

object-fit()
  vendorize-property('object-fit', arguments)




transform()
  vendorize-property('transform', arguments)

transform-origin()
  vendorize-property('transform-origin',arguments)

backface-visibility()
  vendorize-property('backface-visibility',arguments)





// TRANSITIONS

transition()
  vendorProperty('transition', arguments)

transition-delay()
  vendorProperty('transition-delay', arguments)

transition-duration()
  vendorProperty('transition-duration', arguments)

transition-timing-function()
  vendorProperty('transition-timing-function', arguments)

transition-property()
  vendorProperty('transition', arguments)





/*

BOX

http://flexiejs.com/playground/

In the Firefox implementation, if the parent element has a width value that is auto or less than the children’s width combined, that value is ignored and the parent is resized to accommodate all of its children. This is not what we want; if we’ve set a width value for the parent element, we want that width to be respected.
I don’t believe either WebKit or Firefox have done this incorrectly as such. The module isn’t clear about which of these methods is right. But I would say that the WebKit implementation respects the values we assign to elements and so is more predictable and thus easier to work with.


As you may be able to deduce, this value triggers the Flex Box layout but makes the element run inline in the document flow, without creating a line break. Firefox’s -moz-box implementation is actually incorrect and behaves like -moz-inline-box


*/

display()
    vendorize-property("display",arguments)

box-orient()
    vendorize-property('box-orient', arguments)

box-pack()
   vendorize-property('box-pack',arguments)

box-align()
    vendorize-property('box-align',arguments)

box-ordinal-group()
    vendorize-property('box-ordinal-group',arguments)

box-direction()
    vendorize-property('box-direction',arguments)

box-flex-group()
    vendorize-property('box-flex-group',arguments)

box-lines()
    vendorize-property('box-lines',arguments)

box-sizing()
    vendorize-property('box-sizing',arguments)

//on sub-elements of a box
box-flex()
    vendorize-property('box-flex', arguments)
/*
box(flexes=false,orient="horizontal",align="start")
    vendorValue("display","box")
    box-orient unquote(orient)
    box-pack unquote(align)

    if flexes isnt false
        for flex,i in flexes
            & > *:nth-child({i+1})
                box-flex flex
*/
box-shadow()
  vendorize-property('box-shadow', arguments)

box-sizing()
  vendorize-property('box-sizing', arguments)
 






/*
 * Helper for border-radius().
 */

-apply-border-radius(pos)
  if length(pos) == 3
    // border-radius: <top | buttom> <left | right> <n>
    y = pos[0]
    x = pos[1]
    vendorProperty('border-radius-%s%s' % pos, pos[2], only: moz)
    vendorProperty('border-%s-%s-radius' % pos, pos[2], ignore: moz)
  else if pos[0] in (top bottom)
    // border-radius: <top | bottom> <n>
    -apply-border-radius(pos[0] left pos[1])
    -apply-border-radius(pos[0] right pos[1])
  else if pos[0] in (left right)
    // border-radius: <left | right> <n>
    unshift(pos, top);
    -apply-border-radius(pos)
    pos[0] = bottom
    -apply-border-radius(pos)

/*
 * border-radius supporting vendor prefixes and
 * augmented behavior.
 * 
 * Examples:
 *
 *    border-radius: 2px 5px
 *    border-radius: top 5px bottom 10px
 *    border-radius: left 5px
 *    border-radius: top left 5px
 *    border-radius: top left 10px bottom right 5px
 *    border-radius: top left 10px, bottom right 5px
 *
 */

border-radius()
  pos = ()
  augmented = false
  for args in arguments
    for arg in args
      if arg is a 'ident'
        append(pos, arg)
        augmented = true
      else
        append(pos, arg)
        if augmented
          -apply-border-radius(pos)
          pos = ()
  vendorProperty('border-radius', pos) unless augmented




/*
TODO
//cross-browser support for units
- clean up how 0<unit> cases are handled
- factor out a few functions...
- how can short-circuiting help? Check once stylus supports it
*/
vendorize-unit(prop,args)
    n = args[0]
    important = args[1] or ''

    if type(n) is "unit" 
        n = 0 if n == 0

        if unit(n) is "rem"
            nRem = n
            nPx = unit(n,"px") * base_font_size
            {prop} s("%s %s", nPx, unquote(important))
            {prop} s("%s %s", nRem, unquote(important)) 
            
        else
            if unitless(n) and n > 0
                n = unit(n*gu,"px")
            {prop} s("%s %s", n, unquote(important)) 
    else
        {prop} s("%s %s", n, unquote(important)) 





line-height()
    vendorize-unit("font-size",arguments)
font-size()
    vendorize-unit("font-size",arguments)


top()
    vendorize-unit("top",arguments)
right()
    vendorize-unit("right",arguments)
bottom()
    vendorize-unit("bottom",arguments)
left()
    vendorize-unit("left",arguments)



padding()
    css-shorthand('padding',arguments) 
padding-left()
    vendorize-unit("padding-letf",arguments)
padding-right()
    vendorize-unit("padding-right",arguments)
padding-top()
    vendorize-unit("padding-top",arguments)
padding-bottom()
    vendorize-unit("padding-bottom",arguments)



margin()
    css-shorthand('margin',arguments) 
margin-left()
    vendorize-unit("margin-left",arguments)
margin-right()
    vendorize-unit("margin-right",arguments)
margin-top()
    vendorize-unit("margin-top",arguments)
margin-bottom()
    vendorize-unit("margin-bottom",arguments)


width()
    vendorize-unit("width",arguments)


min-width()
    vendorize-unit("min-width",arguments)
max-width()
    vendorize-unit("max-width",arguments)
max-height()
    vendorize-unit("max-height",arguments)

//http://css-tricks.com/snippets/css/cross-browser-min-height/
min-height()
    vendorize-unit("min-height",arguments)
    if support_for_ie
       //TODO check if the below syntax works, no quotes around h? h+1? other units: %? em?
